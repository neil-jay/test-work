name: Version, Changelog, and Release

on:
  push:
    branches:
      - main

jobs:
  version-changelog-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Fetch and reset to latest changes
        run: |
          git fetch origin ${{ github.ref }}
          git reset --hard origin/${{ github.ref_name }}

      - name: Determine current version
        id: current_version
        run: |
          current_version=$(node -p "require('./package.json').version || '0.1.0'")
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      - name: Generate version and changelog
        id: release
        run: |
          if [ -z "${{ steps.current_version.outputs.current_version }}" ]; then
            npm version 0.1.0 --no-git-tag-version
          fi
          npm run release
          new_version=$(node -p "require('./package.json').version")
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git add .
          git commit -m "chore(release): ${{ steps.release.outputs.new_version }}" || echo "No changes to commit"

      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push --follow-tags origin ${{ github.ref }} || (git pull --rebase origin ${{ github.ref }} && git push --follow-tags origin ${{ github.ref }})

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          changelog=$(awk '/^## / {if (p) {exit}; if (!p) {p=1; next}} p' CHANGELOG.md)
          gh release create v${{ steps.release.outputs.new_version }} \
            --title "Release v${{ steps.release.outputs.new_version }}" \
            --notes "$changelog"